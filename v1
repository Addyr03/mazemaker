#origonal https://github.com/tonypdavis/PythonMazeGenerator/blob/master/pygame%20maze%20generator%20with%20solution.py
# changed the colours why have so many
#changed the width and height as this did not make sence
#saves the maze as a file on the desktop
#got rid of the auto complete becasue why 
#added a start and finish square 


import pygame
import time
import random

WIDTH = 440
HEIGHT = 440
FPS = 60

WHITE = (255, 255, 255)
BLUE = (0,255,0,)
BLACK = (0,0,0)

# initalise Pygame
pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("New Python Maze Generator")
clock = pygame.time.Clock()
font = pygame.font.SysFont("freesansbold.ttf", 19)

x = 0                   
y = 0                   
w = 20                  
grid = []
visited = []
stack = []
solution = {}



def Start (msg,color):
    screen_text = font.render(msg, True, color)
    screen.blit(screen_text, [25,22])

def Finish (msg,color):
    screen_text = font.render(msg, True, color)
    screen.blit(screen_text, [405,402])

def build_grid(x, y, w):
    for i in range(1,21):
        x = 20                                                            
        y = y + 20                                                       
        for j in range(1, 21):
            pygame.draw.line(screen, BLACK, [x, y], [x + w, y])           
            pygame.draw.line(screen, BLACK, [x + w, y], [x + w, y + w]) 
            pygame.draw.line(screen, BLACK, [x + w, y + w], [x, y + w])  
            pygame.draw.line(screen, BLACK, [x, y + w], [x, y])          
            grid.append((x,y))                                           
            x = x + 20                                                   


def push_up(x, y):
    pygame.draw.rect(screen, WHITE, (x + 1, y - w + 1, 19, 39), 0)         
    pygame.display.update()                                            


def push_down(x, y):
    pygame.draw.rect(screen, WHITE, (x +  1, y + 1, 19, 39), 0)
    pygame.display.update()


def push_left(x, y):
    pygame.draw.rect(screen, WHITE, (x - w +1, y +1, 39, 19), 0)
    pygame.display.update()


def push_right(x, y):
    pygame.draw.rect(screen, WHITE, (x +1, y +1, 39, 19), 0)
    pygame.display.update()


def single_cell( x, y):
    pygame.draw.rect(screen, WHITE, (x +1, y +1, 18, 18), 0)         
    pygame.display.update()


def backtracking_cell(x, y):
    pygame.draw.rect(screen, WHITE, (x +1, y +1, 18, 18), 0)       
    pygame.display.update()                                       


                              

def carve_out_maze(x,y):
    single_cell(x, y)                                              
    stack.append((x,y))                                           
    visited.append((x,y)) 


    while len(stack) > 0:                                         
        time.sleep(.07)                                          
        cell = [] 
        pygame.draw.rect(screen, BLUE, [21,21,19,19])
        pygame.draw.rect(screen, BLUE, [401,401,19,19])
        Start("S", WHITE)
        Finish ("F", WHITE)
                                               
        if (x + w, y) not in visited and (x + w, y) in grid:      
            cell.append("right")                                  

        if (x - w, y) not in visited and (x - w, y) in grid:       
            cell.append("left")

        if (x , y + w) not in visited and (x , y + w) in grid:     
            cell.append("down")

        if (x, y - w) not in visited and (x , y - w) in grid:      
            cell.append("up")

        if len(cell) > 0:                                          
            cell_chosen = (random.choice(cell))                    

            if cell_chosen == "right":                             
                push_right(x, y)                                   
                solution[(x + w, y)] = x, y                        
                x = x + w                                          
                visited.append((x, y))                              
                stack.append((x, y))                                

            elif cell_chosen == "left":
                push_left(x, y)
                solution[(x - w, y)] = x, y
                x = x - w
                visited.append((x, y))
                stack.append((x, y))

            elif cell_chosen == "down":
                push_down(x, y)
                solution[(x , y + w)] = x, y
                y = y + w
                visited.append((x, y))
                stack.append((x, y))

            elif cell_chosen == "up":
                push_up(x, y)
                solution[(x , y - w)] = x, y
                y = y - w
                visited.append((x, y))
                stack.append((x, y))
        else:
            x, y = stack.pop()                                    
            single_cell(x, y)                                     
            time.sleep(.05)                                       
            backtracking_cell(x, y)                               


x, y = 20, 20                     
build_grid(40, 0, 20)             
carve_out_maze(x,y)               



fname = "maze.png"
pygame.image.save(screen, fname)

#pygame.quit()
running = True
while running:
    clock.tick(FPS)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

pygame.quit()
